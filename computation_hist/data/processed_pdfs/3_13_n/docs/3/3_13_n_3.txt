from the

NUMERICAL ANALYSIS

LABORATORY
of the

UNIVERSITY of ARIZONA

 
 
  

<<

VOLUMN II NUMBER 5 MAY, 1959
COMPUTERS HAVE NOT MADE HUMANS OBSOLETE!

By Dr. Harvey Cohn, Head, Mathematics Department
University of Arizona

In appreciating the role of computers in society, either inside or out-
side the university, it is important to know their limitations. Limitations
of speed, capacity, dexterity, etc. are almost meaningless with today's ex-
cellent electronics industry. Yet one genuine limitation exists: machines
can not create new ideas. They can only execute ideas preconceived by the

human, more faithfully than the human.

The inability of machines to create is simply a result of the type of
design common to all computers and a result of the utter reliability of the
operation! This limitation need not dampen interest in computers any more
than the barrier presented by the speed of light need dampen interest in de-
signing missiles. It would still be better to think of the machine as what
Ashby called an intelligence amplifier. Thus a user of a machine is like
an executive with a staff of specialists whose objective reports make pos-
sible a decision. While we may at present content ourselves with being
thankful for what computers can do, nevertheless limitations will ultimately
become objectives.

The inability to ''create new ideas'' (beyond the ingenuity of the user)
is perhaps subject to semantic disputes if we try to define our terms pre-
cisely. Yet a more truly rigid mathematical limitation is also present. The
mathematician indeed enters the picture in a negative way when he is not us-
ing the machine as an intelligence amplifier. There is a well recognized
theorem in mathematics that NO UNIVERSAL ALGORITHM EXISTS: there is no pro-
cess for solving all problems by machine (or by any humanly executed rigid
decision process either).


A man who claims to be able to solve all problems by a system, (or pro-
gram, or algorithm), is fooling himself. If he "is that smart, he does guess-
work or perhaps uses divine inspiration, but he has no system: This nonexis-
tence of a universal algorithm is a genuine mathematical result ascribed to
GYdel, Post, and Turing (1933-6 A.D.), which probably ranks with the work of
Aristotle (330 B.C.) on logic. (The reader is spared an exact formulation here
by virtue of the stupefying ugliness of the symbols and page-layout required in
symbolic logic, but the more venturesome readers might wish to consult S. Kleene,
Metamathematics).

We shall consider a more specialized technical situation, due to Turing,
illustrating the limitation on machines. Suppose we have various decks of (read-
able) input cards that will be fed into a machine to read and compute (during and
after reading). A human programmer, we hope, cam usually look at the deck and
tell if the deck will produce an error stop. But the human can have no system,
or, in other words, a machine can not do his work.

Let us prove no machine program can examine an arbitrary 'running deck" and
decide in a finite number of steps if the running deck ever produces an error
stop. Suppose such a program exists, (call it P). It is to be loaded followed
by an arbitrary running deck D to be tested. The combination is written (p,D).
Use the following standard form: While seemingly examining a running deck D, let
P actually "consider" D followed by D, written (D,D) and let P announce the re-

sult of running (D,D) by 'calling itself a liar" as follows:

 

 

1. If (D,D) will produce an error stop then (P,D) announces this fact by
performing a legitimate operation such as a ''print'.

2. If (D,D) will produce no error stop then (P,D), announces this fact by
performing an error stop.

Then we see if P exists (P,P) can produce no result without a contradiction.
Hence the algorithm P does not exist. (See illustration opposite page.)

In the same way, we can feed the English dictionary and rules of grammar in-
to a machine but no program can exist for telling whether a group of words has
"meaning, no matter how carefully we define meaning in terms of machine-like rules.

On the other hand, literal translation of languages is not only possible but has
been done at least five years ago.

 

Thus for a long time machines will need constant human guidance, in return
for their service, preferable of the type that can be achieved best at a university
with its broad range of interests and talents.

% n% kN

NEWS

The publication of the Bulletin An extention of our teaching assign-
will resume in September. At this ments includes a section of our begin-
time the intentions are to carry the ning programming class in the first ses-
same general format into the next ac- sion of summer school (10:00 - 12:00,
ademic year. We would appreciate fur- five days a week). Also a reminder that
ther comments on how we might serve with the new catalogue our courses will
the wide variety of subscribers. Our in general have different course numbers.

mailing list at present includes 83
on campus, 224 in the state, and 84
outside the state.


Combination
(P, D)

l
(into machine)

   
  

J

(into machine)

Combination
(D, D)

  

tradiction).

Illustration for

NEWS

The spring meeting of the South-
west Universities Computer Group was
held in Austin, Texas, on May 1 and 2.
Dr. Wymore, Director of NAL, presented
a paper entitled, "The Computation
Facility as a Teaching Department",
also during the conference a demonstra-
tion of the initial phase of a SOAP
revision being completed here at NAL
was given. This program is the sub-
ject of Programming Aids article this
month. The opening meeting for 1960
has tentatively been scheduled for
the University of Arizona.

Unsuccessful attempt at a (theoretical) program P,
to test all decks for errors in running:

[ae Deck 'D'", being tested
FF Deck "P", the program to test (D,D)

The above set of decks tests the following situation:

Thus (P,P) ''operates' exactly when

     
 
   
   
    
   
 
  

If (D,D) "operates', (P,D)
produces an error.

   

If (D,D) produces an error
(P,D) "operates''.

    
      

(P,P) produces an error (con-

 
 

article

New equipment in the NAL in-
cludes an IBM 101 statistical sorter
received on May 11, and a full com-
plement of extra features such as
five additional pilot selectors, a
total of 44 co-selectors, one extra
group of filters, a total of eight
alteration switches, and three more
digit selectors. Also four print-
ing key punches are due by July 1,
bringing the total to twelve. On
order is an IBM 557 Interpreter
which is expected sometime this

summer.


PROGRAMMING AIDS: Â©

Since the arrival of the equipment to augment our 650 there has been a
noticeable increase in the cost of SOAPing a program. This, of course, is be-
cause the existing SOAPs, do not utilize the hardware configuration at hand.
After discussing this problem with others we decided to write a new SOAP rou-
tine which would use the machine as we have it. (Indexing registers, floating
point, and immediate access storage.) A prototype deck was demonstrated in
Austin, Texas on May 2, 1959. This deck was by no means final, but established
some retrieval of lost costs over basic SOAP.

The proposed SOAP X is in its evolutionary stages with each mew feature
coming at the expense of painful searches for locations. Contrary to popular
belief the I.A.S. does not give a 60 word extension of memory if used for more
than one subroutine. The first intent of SOAP X is to increase speed, the

second is to maintain compatibility. SOAP X will accept programs written in

CASE SOAP III language completely. Ideas gleaned from the work of others such
as IBM, Carnegie Tech, Wisconsin, etc. have been weighed and added if feasible.
Some new features for utilization of the IAS have developed, as previously,
through the needs of those actually doing the programming.

Such subjects as '"Macro' instructions have been evaluated and finally re-
jected due to memory limitations. SOAP X is designed for machines without bulk
storage units. The use of Carnegie Tech's TASS routine is suggested for such
fortunate users. An optional feature in the utilization of SOAP X is the util-
ization of a 407-on-line accounting machine for immediate listings of the single
instruction output. By this technique it is possible to get your one per card oH
listings while assembling and get a five per card deck corresponding to the
program. (1l/card and 5/card output are still available by MIX operation.)

 

There is obviously some question as to the appropriateness of publishing
the notice of a program prior to completion. This would not have been done
but for the academic year nature of this bulletin. It is anticipated that full
doccumentation including decks and wiring diagrams will be available prior to
the start of the fall semester. Since we would not be able to communicate
through this medium until that time we decided to pre-announce ARIZONA SOAP X
early. This of course puts the job on a ful ''crash' basis. Since the decks of
individual intended features run, we feel confident of our ability to merge
them. Of course, a period of error testing is necessary to permit our friends
use of a reasonably bug-free routine.

We encourage our readers to comment on their needs in the realm of SOAP
type operations and we will attempt to analyze the application to SOAP X. The
overall intent is the greatest utility to the greatest number of users in-
cluding ourselves,


