20

of complete repetitions, it’s usually not worth carry.ing
out the calculation. It could be carried out by machine,
however, for the reliability of the answer would be very
much greater and it would involve very much. l'ess time
to repeat the calculations for a check. In addition, 1t 1s
possible to program internal checks, which can spot
many possible errors as the work progresses. \

This reliability, especially in the storage unit, hz.ts
only recently been achieved; at present the.magnfetlc
core storage units are superior, but ferroelectric deylces
might eventually compete or surpass them. Qrdlnary
vacuum tubes make up the usual arithmetic unit; tran-
sistors will certainly help to reduce size and power re-
quirements, when they can be used without sacrifice of
speed or reliability. ;

But I said I didn’t intend to boast of future possi-
bilities. What I want to do is to discuss some of the
shortcomings of present digital computers and then, by
means of a series of examples, each with a moral at-
tached to it, to indicate some of the ways we can ex-
ploit the computer’s good points and obviate some of
its deficiencies. I'll spend my time, as I have so far,
discussing the behavior of the really big machines, the
megabuck jobs, for here both advantages and short-
comings are more apparent.

THE major shortcomings of today’s electronic calcu-
lators are in part instrumental and in part pro-
cedural. In the first place, the arithmetic and the stor-
age portions of the computer have outstripped the other
parts, the input and output units, in reliability, speed,
and versatility. The input unit—the link between the
written instructions from the person desiring the solu-
tion and the sequence of signals in the internal storage
which tells the machine how to produce the solution—
is less satisfactory. It is relatively slow and compli-
cated and usually requires transposing the original in-
structions to card or tape by human means. Each such
transposition may produce errors, errors not easy to
guard against by internal checks.

This lack of simplicity and flexibility in the input
equipment is a more serious handicap when it comes to
using the computer to process experimental data. Many
large-scale installations for experimental research al-
ready have special-purpose computers attached. But if
the connection between the electrical or optical measur-
ing device and the punched tape or card could be sim-
plified, a great deal of the reduction and statistical
analysis of data could be carried out on a general-pur-
pose computer in a routine manner. It is to be hoped
that more versatile input equipment will be developed
in the near future, which will allow these potentialities
to be realized.

Still more inadequate, as compared to the central
units of the machine, is the output equipment. If the
results can be given in terms of relatively few numbers,
the present output is not too unsatisfactory; the result
can be displayed on a cathode-ray scope or punched or
printed on a card almost as quickly as the machine can
carry out a thousand or so elementary operations. But

if the results involve large lists of numbers, we reach
the absurd situation where it takes much more time to
get the answer out of the machine than it does for the
machine to compute the answer in the first place.

We can often free the rest of the mach}ne for other
work, while this slow transcription is taking place, by
employing a sequential procedure. We first run th?.an-
swer out on magnetic tape and then, on an auxiliary
machine, go from magnetic tape to punched paper tape
or card and this, then, finally goes to the tabulator or
automatic typewriter, which prints a table we can use.
The disadvantages of this multiple sequence of opera-
tions in inconvenience and loss of reliability are obvi-
ous. In some machines one can go from rr.lagnetlc tap.e
direct to printer, but any machine involving mechani-
cal printing is slow compared to the rest of the com-
puter. ) S

It is also possible to program the machine so it will
print the answer in digital form on the surface of a
cathode-ray tube, where it can be photographed at a
rate of about one page of figures per second. This at
least has the advantage of directness of path from the
inside of the machine to the pages of numbers, but the
photographic copies produced by this method at pres-
ent fall far short of any reasonable standards of legi-
bility and typography which one might place on nu-
merical tables for general use. Future developments
probably will improve this procedure, both as to speed
and clarity. But at present, if one wishes to use the re-
sults more than a few times, the photographs are usu-
ally transcribed by hand to a more legible form, which
procedure, of course, introduces possible errors and
takes additional time.

The lack of flexibility, speed, and clarity of the out-
put unit is still more apparent when we wish to display
the answer in nondigital form, such as a graph or dia-
gram. A well-drawn graph should be readable to one
thousandth of the full range of scale, giving three sig-
nificant decimal digits. A graph on the face of the
usual cathode-ray tube, however, can hardly be read to
better than two significant digits. Certainly a great
deal of work is required before the output equipment
begins to approach the present storage and arithmetic
units in speed, reliability, and versatility.

These deficiencies are not too serious, however. Many
of them will be remedied in the near future and most
of them are not noticed by the occasional user of the
machine, are not very apparent unless one is asking the
utmost from the machine. A much more serious dis-
ability is not so easy to overcome, for it is inherent in
the very nature of the machine; to ask that it be done
away with is like asking to have the fun of swimming
without the nuisance of getting wet. This bottleneck to
rapid machine use, this barrier which every new user

must learn to surmount, is the process of programming
itself.

YOU see, although the central parts of the really

.fast machine, the high-speed storage and arith-
metic units, are remarkably rapid and reliable, they

PHYSICS TODAY

 

 

are incapable of doing anything they are not told. And
they must be told in complete and exhausting detail.
When programming a calculation to be done by hand,
one can assume that the computer, even though not a
professional, will exercise a certain amount of judgment
at various points along the way, will make the proper
modifications if some number turns out to be negative
and will call for help if things seem to be going wrong.
To keep the programming simple, one often programs
the work in sections, carrying a long computation up to
an intermediate point, to see what the intermediate re-
sults are like, before deciding on the program details
for the next stage.

Such casual programming techniques will never do
for the really fast computers. The machine has to be
told exactly what to do at each step in the calculation;
what to do if the number turns out to be negative,
what to do if the number is larger than the storage
register it is supposed to fit into, not to go on com-
puting terms in a series if they are negligibly small,
not to try to divide by zero and so on and so on, in
complete and exhausting detail. The important thing to
remember in machine programming is that machine
cocmputers are dumber than anybody.

The comforting technique of doing the work in sec-
tions, and pausing to decide what to do next turns out
to be quite inefficient because of the extreme disparity
in the times for computing and those used for pausing.
With hand computation it might take six hours to com-
plete one section of the calculations and then take a
half-hour to program the next step; with the machine
it might take six seconds to complete the calculations
and, because of the increased detail required, it might
take two hours to program the next step. One obviously
can’t keep the machine waiting for those two hours, so

the machine is switched to other problems and one has

to wait in line to get back on, after the next section is
programmed. If possible, therefore, it is best to pro-
gram a problem in one continuous unit, bringing out of
the machine only those final results which are neces-
sary to know in the end. Because of the present rela-
tive inefficiency in output equipment, the fewer the
numbers brought out of the machine, the quicker the
results will be available.

Thus is posed a dilemma which can annoy and frus-
trate the novice. The final, working program should
minimize the numbers brought out of the machine. But
if the program has an error in it, or has not allowed for
all possible alternatives at each step, the numbers com-
ing out of the machine will be inconsistent nonsense
and one must start “trouble-shooting”. Or, even worse,
the results may only be slightly inconsistent, and one
is not sure whether there is an error or not. And here
the lack of output details is a handicap, for one often
has to examine the intermediate results for a number of
trial computations before the programming error Is
found—and these intermediate results have not been
brought out of the machine. There are, of course, so-
called “post-mortem” techniques for bringing the ma-
chine contents to light after a bad run, so the faulty

OCTOBER 1956

21

parts of the program can be diagnosed. And one soon
learns the tricks to be used to write a “clean” program,
one which is easy to diagnose and check. But it should
be evident that trouble shooting a complex program
can be as time consuming as trouble-shooting experi-
mental equipment often is.

At present, the writing of a program for a large com-
putational problem, checking it out and determining the
accuracy of the final answers, is the biggest bottleneck
of all in the use of the really fast computers. At MIT,
for example, we have adopted the rule of thumb that
any computation which can be completed by hand with
an expenditure of less than about three man-months of
time, and which won’t be repeated sooner than a year,
should 7ot be programmed for Whirlwind. We have
found by experience that the answers to such problems
can usually be obtained quicker by hand, because a new
program, for a tough problem, can easily take more
than three man-months to perfect.

This does not mean that one should turn big prob-
lems over to professional programmers to code, either.
Many of the critical details of the program can only be
effectively designed by someone who knows both the
problem and the techniques of programming. It is ad-
visable that the novice, who wishes to have a big prob-
lem solved by machine, should spend a couple of weeks
learning basic programming techniques, and then should
work out his first program together with an experienced
professional, who can help him avoid the usual pitfalls
and can suggest the use of already-tested subprograms
for part of the work. After this first experience the user
can carry on with only occasional help and advice, and
in a short time he usually prefers to do his own pro-
gramming. Several such amateurs, after a few practice
runs, have taught our professionals a trick or two.

As a matter of fact, after machine operation gets to
be more standardized and after we have gained more
experience in machine use, this programming bottleneck
should ease considerably. After all, from a general point
of view, a program is a kind of mathematical notation,
expressing, in symbolic form, the logical relationships
between various mathematical steps in the solution of
the problem. As with the usual mathematical symbols,
a poor notation can greatly hinder us, a good notation
can make it easy to work out the solution.

At present we are not very far along in developing
this new brand of notation for programming. The basic
symbols, such as addition, transfer to storage, and the
like, are built into the machine. The more complex ones
are collected in libraries of subroutines. When, for ex-
ample, someone works out a program for computing the
exponential function for any specified argument, or a
way to solve a five-by-five secular determinant, this pro-
gram can be written up, with comments and estimates
of error, and placed in a library of subroutines. Then,
if anyone else requires the value of an exponential, as
a part of his calculation, this subroutine can be in-
serted in his larger program. Eventually some of the
simpler and more popular subroutines can then be built
into the machine so that, for example, the code exp